pipeline {
    agent any

    environment {
        DOCKER_IMAGE_FRONTEND = 'reactjs-frontend'
        DOCKER_IMAGE_BACKEND = 'spring-data-rest'
        DOCKER_CREDENTIALS = 'Docker-credentials'
        SONAR_PROJECT_KEY = 'SpringDataRest'  // Update with your SonarQube project key
        SONAR_HOST_URL = 'http://localhost:9000'  // Update with your SonarQube server URL
        SONAR_LOGIN = 'sqp_a04f34dd90445ff906509cfac3864497a8e3807b'  // Update with your SonarQube token

    }

    stages {
        stage('Checkout Source Code') {
            steps {
                checkout scm
            }
        }

        stage('SonarQube Analysis') {
            steps {
                script {
                    bat """
                        sonar-scanner.bat -Dsonar.projectKey=%SONAR_PROJECT_KEY% ^
                                         -Dsonar.sources=. ^
                                         -Dsonar.java.binaries=target ^
                                         -Dsonar.host.url=%SONAR_HOST_URL% ^
                                         -Dsonar.login=%SONAR_LOGIN%
                    """
                }
            }
        }


        stage('Build Backend') {
            steps {
                script {
                    bat './mvnw clean install'
                    bat "docker build -t %DOCKER_IMAGE_BACKEND% ."
                }
            }
        }

        stage('Build Frontend') {
            steps {
                script {
                    bat 'cd src/main/webapp/reactjs && npm install && set CI=false npm run build'
                    bat "docker build -t %DOCKER_IMAGE_FRONTEND% ."
                }
            }
        }

        stage('Login to Docker') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: DOCKER_CREDENTIALS, usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                        bat "docker login -u %DOCKER_USERNAME% -p %DOCKER_PASSWORD%"
                    }
                }
            }
        }

        stage('Deploy with Docker Compose') {
            steps {
                script {
                    bat "docker-compose up -d"
                }
            }
        }
    }

    post {
        always {
            cleanWs() // Clean up workspace
        }

    }
}
